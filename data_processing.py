# -*- coding: utf-8 -*-
"""Data_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kdSz___tWatR2ZfXwgW0Dqa8lUkeWmT7
"""



dtype = {'school_id': 'int32',
         'user_id': 'int32',
         'question_id': 'int32',
         'correct': 'int16'}
from google.colab import drive
drive.mount('/content/gdrive')


train_df = pd.read_csv('/content/gdrive/MyDrive/skill_builder_data_corrected_collapsed_org.csv', usecols=[20, 3, 5, 7], dtype=dtype)
print(train_df.head())

###Get the unique no of questions and schools###
questions = list(train_df["problem_id"].unique())
schools_tot = train_df["school_id"].unique()
print("Unique Questions:", questions)
n_questions = len(questions)
print("number questions:", n_questions)
print("Tot num of schools:", len(schools_tot))
print(type(questions))

###Mapping of the problem id###
count = {}
print(questions)
for i in range(1,len(questions)+1):
    count[questions[i-1]]=i
print(count)
train_df['new_prob_id']=0
for i in range(len(train_df['problem_id'])):
    train_df['new_prob_id'][i]=count[train_df['problem_id'][i]]

train_df

group = train_df[['user_id', 'new_prob_id', 'correct']].groupby('user_id').apply(lambda r: (
            r['new_prob_id'].values,
            r['correct'].values))
print("Group:",len(group))


#Task 1 : students with school id = 5049
var= train_df[train_df["school_id"] == 5049]
print("No of schools with 5049:",len(var))
group1 = var[['user_id', 'new_prob_id', 'correct']].groupby('user_id').apply(lambda r: (
            r['new_prob_id'].values,
            r['correct'].values))
print("Length of group1:",len(group1))


#Task 2 : students with school id = 1998
var1= train_df[train_df["school_id"] == 1998]
print("No of schools with 1998:",len(var1))
group2 = var1[['user_id', 'new_prob_id', 'correct']].groupby('user_id').apply(lambda r: (
            r['new_prob_id'].values,
            r['correct'].values))
print("Length of group2:",len(group2))

#Task 3 : students with school id = 5049 & 1998
comb_df = pd.concat([var, var1])
print("No of schools with 5049 & 1998: ",len(comb_df))
group_comb = comb_df[['user_id', 'new_prob_id', 'correct']].groupby('user_id').apply(lambda r: (
            r['new_prob_id'].values,
            r['correct'].values))
print("Length of group combined:",len(group_comb))

t1 = var.groupby('problem_id').count()
 t1.shape #5049

t2 = var1.groupby('problem_id').count()
t2.shape

# t = t1.join(t2)

t = pd.merge(t1,t2,left_index = True,right_index = True)
t.shape

users = var.user_id.unique()
print("UU:",len(users))
p_id = var[var.user_id == 79411]
#print(p_id)
u_id = p_id.problem_id.nunique()
print(u_id)
print(list(users))

#Count of problem id's - Task 1 5049
u_idcount=[]
uidlis=list(users)
for i in range(len(uidlis)):
  p_id = var[var.user_id == uidlis[i]]
  u_idcount.append(p_id.problem_id.nunique()) 

print("Length of unique users in 5049:",len(users))
dfcount=pd.DataFrame(uidlis,columns=['user_id'])
dfcount['count of P_id']=u_idcount
pd.set_option('display.max_rows', None)
#print(dfcount)
dfcount

#Count of problem id's - Task 2:1998
users_1998 = var1.user_id.unique()
print("Length of unique users in 1998:",len(users_1998))
u_idcount_1998=[]
uidlis1=list(users_1998)
for i in range(len(uidlis1)):
  p_id = var1[var1.user_id == uidlis1[i]]
  u_idcount_1998.append(p_id.problem_id.nunique()) 

df=pd.DataFrame(uidlis1,columns=['user_id'])
df['count of P_id']=u_idcount_1998
pd.set_option('display.max_rows', None)
#print(df)
df

#Train and Test split (80-20)
train_g1, test_g1 = train_test_split(group1, test_size=0.2, random_state=1102021)  #5049
train_g2, test_g2 = train_test_split(group2, test_size=0.2, random_state=1102021)  #1998
train_g12 , test_g12 = train_test_split(group_comb, test_size = 0.2, random_state=1102021)   #5049 & 1998

#Train split for the two individual and joint task id's:
train1 , val1 = train_test_split(train_g1, test_size = 0.2, random_state=1102021)
train2 , val2 = train_test_split(train_g2, test_size = 0.2, random_state=1102021)
train12 , val12 = train_test_split(train_g12, test_size = 0.2, random_state=1102021)


print("Train samples of 5049:",len(train1))
print("Train samples of 1998:",train2)
print("Train samples of 5049 & 1998:",len(train12))
print("Test Samples of 5049:",test_g1)
print("Test Samples of 1998:",len(test_g2))
print("Val of 5049:",len(val1))
print("Val of 1998",len(val2))

####Length of unique problem in train set of 5049 and 1998 ####

tr1 = train1.to_list()
listr1 =[]
for i in range(len(tr1)):
   listr1.extend(list(tr1[i][0]))
lis_tr_u1 = np.unique(np.array(listr1))
print(listr1)
print("Length of 5049 train:",len(listr1))
print("Length of unique 5049 train :",len(lis_tr_u1))

tr2 = train2.to_list()
listr2 =[]
for i in range(len(tr2)):
   listr2.extend(list(tr2[i][0]))
lis_tr_u2 = np.unique(np.array(listr2))
print(listr2)
print("Length of 1998 train:",len(listr2))
print("Length of unique 1998 train :",len(lis_tr_u2))

####Length of unique problem in test set of 5049 and 1998 ####
te1 = test_g1.to_list()
liste1 =[]
for i in range(len(te1)):
   liste1.extend(list(te1[i][0]))
lis_te_u1 = np.unique(np.array(liste1))
print(liste1)
print("Length of 5049 test:",len(liste1))
print("Length of unique 5049 test :",len(lis_te_u1))


te2 = test_g2.to_list()
liste2 =[]
for i in range(len(te2)):
   liste2.extend(list(te2[i][0]))
lis_te_u2 = np.unique(np.array(liste2))
print(liste2)
print("Length of 1998 test:",len(liste2))
print("Length of unique 1998 test :",len(lis_te_u2))

###Difference between sets. Train(1998)-Test(1998) << Test(5049)-Train(1998) ###
print("Train(5049)-Test(5049)",len(list(lis_tr_u1)) - len(list(lis_te_u1)))
print("Train(1998)-Test(1998)",len(list(lis_tr_u2)) - len(list(lis_te_u2)))
print("Test(5049)-Train(1998)",len(list(lis_te_u1)) - len(list(lis_tr_u2)))

cd = train2.index.to_list()
cd
cd1 = test_g2.index.to_list()
cd1
c_d = set(cd1)-set(cd)
len(c_d)

'''tg1 = test_g1.index.to_list()
len(tg1)
c_d1 = set(tg1)-set(cd)
print("Test set of 5049 - Train of 1998:",len(c_d1))
tg2 = train1.index.to_list()
c_d2=set(tg1)-set(tg2)
print("Test of 5049 - Train of 5049:",len(c_d2))
print("length of train of 1998:",len(cd))
print("len of train of 5049:",len(tg2))'''

'''train_g1, test_g1 = train_test_split(t1, test_size=0.2, random_state=42)  #5049
train1 , val1 = train_test_split(train_g1, test_size = 0.2, random_state=42)
train_g2, test_g2 = train_test_split(t1, test_size=0.2, random_state=42)
print(train1)
print(train1.index)
print(t.index)'''

'''t = test_g2.to_list()
lis =[]
lis_u = []
for i in range(len(t)):
   lis.extend(list(t[i][0]))
lis_u = np.unique(np.array(lis))

print(lis)
print("Length of 1998 test:",len(lis))
print("Length of unique 1998 test :",len(lis_u))
#j = test_g1.to_list()
#print(j[0][0])
#Find the differenc betwn unique questions
#Train(5049)-Test(5049) < Test(5049)-Train(1998)'''

### Count of 1's and 0's labels in train set and test set ####

t = []
useridlis=[]
countdf=pd.DataFrame(columns=[['User_Id','Count1','Count0']])
t = train2.to_list()
x=0
for u in range(len(train2)):
  k = t[u][1]
  #print(train1.index[u],":",end='\t')
  #print(k)
  count = 0
  count1 = 0
  for i in range(len(k)):
    if(k[i])==1:
      count = count +1
    else:
      count1 = count1 + 1
    #print("No of 1's: ",count)
    #print("No of 0's: ",count1)
  x = train2.index[u]
  useridlis.append(x)
  countdf.loc[u] = [x,count,count1]

countdf

### Finding which belongs to train , test and val from the whole dataset 5049###
df['Train']=0
df
for i in range(len(df)):
  if df['user_id'][i] in useridlis:
    df['Train'][i]="Train"
  else:
    df['Train'][i]="Test"

### Finding which belongs to train , test and val from the whole dataset of 1998###
dfcount['Train']=0
dfcount
for i in range(len(dfcount)):
  if dfcount['user_id'][i] in useridlis:
    dfcount['Train'][i]="Train"
  else:
    dfcount['Train'][i]="Test"

df
dfcount

#Train dataset and dataloader for 5049
train_dataset_1 = SAKTDataset(train1, n_questions)
train_dataloader_1 = DataLoader(train_dataset_1, batch_size=10, shuffle=True, num_workers=8)

#Train dataset and dataloader for 1998
train_dataset_2 = SAKTDataset(train2, n_questions)
train_dataloader_2 = DataLoader(train_dataset_2, batch_size=10, shuffle=True, num_workers=8)

#Train dataset and dataloader for 5049 & 1998
train_dataset_12 = SAKTDataset(train12, n_questions)
train_dataloader_12 = DataLoader(train_dataset_12, batch_size=10, shuffle=True, num_workers=8)


#Validation dataset and dataloader for 5049:
val_dataset_1 = SAKTDataset(val1, n_questions)
val_dataloader_1 = DataLoader(val_dataset_1, batch_size=10, shuffle=True, num_workers=8)

#Validation dataset and dataloader for 1998:
val_dataset_2 = SAKTDataset(val2, n_questions)
val_dataloader_2 = DataLoader(val_dataset_2, batch_size=10, shuffle=True, num_workers=8)

#Validation dataset and dataloader for 5049 & 1998:
val_dataset_12 = SAKTDataset(val12, n_questions)
val_dataloader_12 = DataLoader(val_dataset_12, batch_size=10, shuffle=True, num_workers=8)

#Test dataset and dataloader for 5049:
test_dataset_1 = SAKTDataset(test_g1, n_questions )
test_dataloader_1 = DataLoader(test_dataset_1, batch_size=20, shuffle=False, num_workers=8)

#Validation dataset and dataloader for 1998:
test_dataset_2 = SAKTDataset(test_g2, n_questions )
test_dataloader_2 = DataLoader(test_dataset_2, batch_size=20, shuffle=False, num_workers=8)

print(f'Train dataset for 5049: {iter(train_dataset_1)}')
print(f'Train dataloader for 5049: {next(iter(train_dataloader_1))}')
print(f'Train dataset for 1998: {next(iter(train_dataset_2))}')
print(f'Train dataloader for 1998: {next(iter(train_dataloader_2))}')
print(f'Test dataset for 5049: {next(iter(test_dataset_1))}')
print(f'Test dataloader for 5049: {next(iter(test_dataloader_1))}')
print(f'Test dataset for 1998: {next(iter(test_dataset_2))}')
print(f'Test dataloader for 1998: {next(iter(test_dataloader_2))}')
print("val:",len(val_dataset_1))
print("va2:",len(val_dataset_2))
print(f'Train dataloader for 5049 & 1998: {len(next(iter(train_dataloader_12)))}')

###### Count of #of 1's and 0's in train and test set ######

q=[]
q=next(iter(train_dataset_2))
print(q[2])
#q[2][5]
count =0
count1 =0
q0 = q[0]
print(len(q0))  
q1 = q[1]
print(len(q1))
q2 = q[2]
print(q2)
for i in range(len(q2)):
  if(q2[i])==1:
    count = count +1
  else:
    count1 = count1 + 1
print("No of 1's: ",count)
print("No of 0's: ",count1)

q=[]
q=next(iter(test_dataset_2))
print(q[2])
#q[2][5]
count =0
count1 =0
q1 = q[2]
print(q1)
for i in range(len(q1)):
  if(q1[i])==1:
    count = count +1
  else:
    count1 = count1 + 1
print("No of 1's: ",count)
print("No of 0's: ",count1)